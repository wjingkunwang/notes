###内部类
####内部类
* 内部类仍然是独立的类，在编译之后内部类会被编译成为独立的.class文件

* 内部类可以被private public protected friendly修饰

####内部类分类
1. 在类中定义一个类(静态内部类，普通内部类)

2. 在方法中定义一个类(局部内部类，匿名内部类)

```
public class Demo {
	//静态内部类
	private static class StaticNestedClass(){
	}
	//普通内部类（成员内部类）
	private class FiledInnerClass(){
	}
	void sayHelll(){
		//方法内部类（局部内部类）
		class LocalClass(){
		}
	}
	//匿名内部类
	Runnable runnable = new Runnable(){
		@Override
		public void run(){
		}
	};
}
```
####静态内部类
最简单的内部类形式。
类定义时加上static关键字。
不能和外部类有相同的名字。
被编译成一个完全独立的.class文件，名称为OuterClass$InnerClass.class的形式。
只可以访问外部类的静态成员和静态方法，包括了私有的静态成员和方法。
生成静态内部类对象的方式为：
OuterClass.InnerClass inner = new OuterClass.InnerClass();

####普通内部类
成员内部类也是定义在另一个类中，但是定义时不用static修饰。
成员内部类和静态内部类可以类比为非静态的成员变量和静态的成员变量。
成员内部类就像一个实例变量。
它可以访问它的外部类的所有成员变量和方法，不管是静态的还是非静态的都可以。
在外部类里面创建成员内部类的实例：
this.new Innerclass();
在外部类之外创建内部类的实例：
(new Outerclass()).new Innerclass();
在内部类里访问外部类的成员：
Outerclass.this.member
####方法内部类
局部内部类定义在方法中，比方法的范围还小。是内部类中最少用到的一种类型。
像局部变量一样，不能被public, protected, private和static修饰。
只能访问方法中定义的final类型的局部变量。
局部内部类在方法中定义，所以只能在方法中使用，即只能在方法当中生成局部内部类的实例并且调用其方法。
####匿名内部类
匿名内部类就是没有名字的局部内部类，不使用关键字class, extends, implements, 没有构造方法。
匿名内部类隐式地继承了一个父类或者实现了一个接口。
匿名内部类使用得比较多，通常是作为一个方法参数。
生成的.class文件中，匿名类会生成OuterClass$1.class文件，数字根据是第几个匿名类而类推。


静态内部类可以调用 外部类的静态属性和方法，不能调用普通
方法和属性。




