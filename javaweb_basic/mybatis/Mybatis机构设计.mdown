[TOC]
##Mybatis功能架构设计
![](http://7xpxnz.com1.z0.glb.clouddn.com/Mybsits%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png)
###Mybatis的功能架构分层：
1. API接口层：
	
	提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。

	**Mybatis和数据库交互的两种方式：(1)传统的MyBatis提供的API(2)使用Mapper接口**

2. 数据处理层：
	
	负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。

3. 基础支撑层：
	
	负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。

##Mybatis主要构件及其相互关系
![](http://7xpxnz.com1.z0.glb.clouddn.com/Mybatis%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.png)

1. **SqlSession**	*作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能*

2. **Executor**		*MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护*

3. **StatementHandler**		*封装了JDBC Statement操作，负责对JDBCstatement的操作，如设置参数、将Statement结果集转换成List集合。*

4. **ParameterHandler**		*负责对用户传递的参数转换成JDBC Statement 所需要的参数*

5. **ResultSetHandler**		*负责将JDBC返回的ResultSet结果集对象转换成List类型的集合*

6. **TypeHandler**		*负责java数据类型和jdbc数据类型之间的映射和转换*

7. **MappedStatement**		*MappedStatement维护了一条<select|update|delete|insert>节点的封*

8. **SqlSource**	*负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回*

9. **BoundSql**		*表示动态生成的SQL语句以及相应的参数信息*

10. **Configuration**	*MyBatis所有的配置信息都维持在Configuration对象之中*

[http://chenjc-it.iteye.com/blog/1460990](http://chenjc-it.iteye.com/blog/1460990)

[http://blog.csdn.net/luanlouis/article/details/40422941](http://blog.csdn.net/luanlouis/article/details/40422941)