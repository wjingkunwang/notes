###Spring容器
####BeanFactory
BeanFactory是Spring框架最核心的接口，它提供IOC的配置机制，但是它无法支持spring的许多插件，如AOP功能、Web应用等。 XMLBeanFactory是BeanFactory典型实现。
![XMLBeanFactory类图](http://7xpxnz.com1.z0.glb.clouddn.com/Spring_xmlbeanfactory.png)
**注意:**

1. 初始化BeanFactory时，必须提供日志框架，在类路径下提供Log4J配置文件。

2. BeanFactoroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的Spring的配置问题。

####ApplicationContext 
![applicationcontext类图](http://7xpxnz.com1.z0.glb.clouddn.com/Spring_applicationContext.png)
ApplicationContext接口由BeanFactory接口派生而来，因而提供BeanFactory所有的功能。ApplicationContext以一种更向面向框架的方式工作以及对上下文进行分层和实现继承，ApplicationContext包还提供了以下的功能： 
• MessageSource, 提供国际化的消息访问  
• 资源访问，如URL和文件  
• 事件传播  
• 载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  

1. 利用MessageSource进行国际化  
  BeanFactory是不支持国际化功能的，因为BeanFactory没有扩展Spring中MessageResource接口。相反，由于ApplicationContext扩展了MessageResource接口，因而具有消息处理的能力(i18N)，具体spring如何使用国际化，以后章节会详细描述。 

2. 强大的事件机制(Event)  
  基本上牵涉到事件(Event)方面的设计，就离不开观察者模式。
ApplicationContext的事件机制主要通过ApplicationEvent和ApplicationListener这两个接口来提供的，和java swing中的事件机制一样。即当ApplicationContext中发布一个事件的时，所有扩展了ApplicationListener的Bean都将会接受到这个事件，并进行相应的处理。 

Spring提供了部分内置事件，主要有以下几种：  
ContextRefreshedEvent ：ApplicationContext发送该事件时，表示该容器中所有的Bean都已经被装载完成，此ApplicationContext已就绪可用 
ContextStartedEvent：生命周期 beans的启动信号  
ContextStoppedEvent: 生命周期 beans的停止信号  
ContextClosedEvent：ApplicationContext关闭事件，则context不能刷新和重启，从而所有的singleton bean全部销毁(因为singleton bean是存在容器缓存中的) 
虽然，spring提供了许多内置事件，但用户也可根据自己需要来扩展spriong中的事物。注意，要扩展的事件都要实现ApplicationEvent接口。  

3. 底层资源的访问  
  ApplicationContext扩展了ResourceLoader(资源加载器)接口，从而可以用来加载多个Resource，而BeanFactory是没有扩展ResourceLoader 

4. 对Web应用的支持  
  与BeanFactory通常以编程的方式被创建不同的是，ApplicationContext能以声明的方式创建，如使用ContextLoader。当然你也可以使用ApplicationContext的实现之一来以编程的方式创建ApplicationContext实例 。 
**注意:**

1. ApplicationContext则相反，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误。 

2. ApplicationContext继承了ResourceLoader接口使得ApplicationContext可以访问到任何外部资源。

####WebApplicationContext 
![webapplicationcontext类图](http://7xpxnz.com1.z0.glb.clouddn.com/Spring_webapplicationcontex.png)

1. WebApplicationContext是专门为Web应用准备的，它允许从相对于Web的根目录的路径装载配置文件来完成初始化。从WebApplicationContext中可以获得ServletContext引用，整个Web应用上下文对象讲作为属性放置在ServletContext中，以便Web引用环境可以访问Spring的上下文。

2. WebApplicationContext初始化
需要拥有Web容器的前提下才可以启动，启动方式有在web.xml下配置自启动的servlet（ContextLoaderServlet）或者定义Web容器监听器（ContextLoaderListener）；
。

这个listener需要检查contextConfigLocation参数。如果不存在的话，它将默认使用/WEB-INF/applicationContext.xml。如果它存在，它就会用预先定义的分隔符（逗号，分号和空格）分开分割字符串，并将这些值作为应用上下文将要搜索的位置。ContextLoaderServlet可以用来替换ContextLoaderListener。这个servlet像listener那样使用contextConfigLocation参数。

####Spring和SpringMVC父子容器
>(1) 通过HierarchicalBeanFactory接口，Spring的IoC容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的Bean，但父容器不能访问子容器的Bean。在容器内，Bean的id必须是唯一的，但子容器可以拥有一个和父容器id相同的Bean。父子容器层级体系增强了Spring容器架构的扩展性和灵活性，因为第三方可以通过编程的方式，为一个已经存在的容器添加一个或多个特殊用途的子容器，以提供一些额外的功能。 
>>(2)Spring使用父子容器实现了很多功能，比如在Spring MVC中，展现层Bean位于一个子容器中，而业务层和持久层的Bean位于父容器中。这样，展现层Bean就可以引用业务层和持久层的Bean，而业务层和持久层的Bean则看不到展现层的Bean。

#####代码解读
```
配置Spring容器

<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:applicationContext-*.xml</param-value>
</context-param>

//ContextLoaderListener中initWebApplicationContext()方法源码片段
//将Spring容器设置到servletContext
servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);

//FrameWorkServlet中initWebApplicationContext()方法源码片段
ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;

cwac.setParent(rootContext);

//获取rootContext
public static WebApplicationContext getWebApplicationContext(ServletContext sc) {
	//从servletContext中获得Spring容器
	return getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);
}
```


